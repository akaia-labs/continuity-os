// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::{
	actor_profile_metadata_type::ActorProfileMetadata,
	external_actor_reference_type::ExternalActorReference,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct RegisterExternalActorArgs {
	pub ext_actor_ref: ExternalActorReference,
	pub callsign:      Option<String>,
	pub metadata:      Option<ActorProfileMetadata>,
}

impl From<RegisterExternalActorArgs> for super::Reducer {
	fn from(args: RegisterExternalActorArgs) -> Self {
		Self::RegisterExternalActor {
			ext_actor_ref: args.ext_actor_ref,
			callsign:      args.callsign,
			metadata:      args.metadata,
		}
	}
}

impl __sdk::InModule for RegisterExternalActorArgs {
	type Module = super::RemoteModule;
}

pub struct RegisterExternalActorCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `register_external_actor`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait register_external_actor {
	/// Request that the remote module invoke the reducer
	/// `register_external_actor` to run as soon as possible.
	///
	/// This method returns immediately, and errors only if we are unable to
	/// send the request. The reducer will run asynchronously in the future,
	///  and its status can be observed by listening for
	/// [`Self::on_register_external_actor`] callbacks.
	fn register_external_actor(
		&self, ext_actor_ref: ExternalActorReference, callsign: Option<String>,
		metadata: Option<ActorProfileMetadata>,
	) -> __sdk::Result<()>;
	/// Register a callback to run whenever we are notified of an invocation of
	/// the reducer `register_external_actor`.
	///
	/// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the
	/// [`super::ReducerEventContext`] to determine the reducer's status.
	///
	/// The returned [`RegisterExternalActorCallbackId`] can be passed to
	/// [`Self::remove_on_register_external_actor`] to cancel the callback.
	fn on_register_external_actor(
		&self,
		callback: impl FnMut(
			&super::ReducerEventContext,
			&ExternalActorReference,
			&Option<String>,
			&Option<ActorProfileMetadata>,
		) + Send
		+ 'static,
	) -> RegisterExternalActorCallbackId;
	/// Cancel a callback previously registered by
	/// [`Self::on_register_external_actor`], causing it not to run in the
	/// future.
	fn remove_on_register_external_actor(&self, callback: RegisterExternalActorCallbackId);
}

impl register_external_actor for super::RemoteReducers {
	fn register_external_actor(
		&self, ext_actor_ref: ExternalActorReference, callsign: Option<String>,
		metadata: Option<ActorProfileMetadata>,
	) -> __sdk::Result<()> {
		self.imp
			.call_reducer("register_external_actor", RegisterExternalActorArgs {
				ext_actor_ref,
				callsign,
				metadata,
			})
	}

	fn on_register_external_actor(
		&self,
		mut callback: impl FnMut(
			&super::ReducerEventContext,
			&ExternalActorReference,
			&Option<String>,
			&Option<ActorProfileMetadata>,
		) + Send
		+ 'static,
	) -> RegisterExternalActorCallbackId {
		RegisterExternalActorCallbackId(self.imp.on_reducer(
			"register_external_actor",
			Box::new(move |ctx: &super::ReducerEventContext| {
				let super::ReducerEventContext {
					event:
						__sdk::ReducerEvent {
							reducer:
								super::Reducer::RegisterExternalActor {
									ext_actor_ref,
									callsign,
									metadata,
								},
							..
						},
					..
				} = ctx
				else {
					unreachable!()
				};
				callback(ctx, ext_actor_ref, callsign, metadata)
			}),
		))
	}

	fn remove_on_register_external_actor(&self, callback: RegisterExternalActorCallbackId) {
		self.imp
			.remove_on_reducer("register_external_actor", callback.0)
	}
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer
/// `register_external_actor`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version
/// bump.
pub trait set_flags_for_register_external_actor {
	/// Set the call-reducer flags for the reducer `register_external_actor` to
	/// `flags`.
	///
	/// This type is currently unstable and may be removed without a major
	/// version bump.
	fn register_external_actor(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_register_external_actor for super::SetReducerFlags {
	fn register_external_actor(&self, flags: __ws::CallReducerFlags) {
		self.imp
			.set_call_reducer_flags("register_external_actor", flags);
	}
}
