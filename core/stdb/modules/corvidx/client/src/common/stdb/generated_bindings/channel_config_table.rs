// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::channel_config_type::ChannelConfig;

/// Table handle for the table `channel_config`.
///
/// Obtain a handle from the [`ChannelConfigTableAccess::channel_config`] method
/// on [`super::RemoteTables`], like `ctx.db.channel_config()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.channel_config().on_insert(...)`.
pub struct ChannelConfigTableHandle<'ctx> {
	imp: __sdk::TableHandle<ChannelConfig>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `channel_config`.
///
/// Implemented for [`super::RemoteTables`].
pub trait ChannelConfigTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`ChannelConfigTableHandle`], which mediates access to the
	/// table `channel_config`.
	fn channel_config(&self) -> ChannelConfigTableHandle<'_>;
}

impl ChannelConfigTableAccess for super::RemoteTables {
	fn channel_config(&self) -> ChannelConfigTableHandle<'_> {
		ChannelConfigTableHandle {
			imp: self.imp.get_table::<ChannelConfig>("channel_config"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct ChannelConfigInsertCallbackId(__sdk::CallbackId);
pub struct ChannelConfigDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for ChannelConfigTableHandle<'ctx> {
	type DeleteCallbackId = ChannelConfigDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = ChannelConfigInsertCallbackId;
	type Row = ChannelConfig;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = ChannelConfig> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> ChannelConfigInsertCallbackId {
		ChannelConfigInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: ChannelConfigInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> ChannelConfigDeleteCallbackId {
		ChannelConfigDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: ChannelConfigDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<ChannelConfig>("channel_config");
	_table.add_unique_constraint::<i128>("id", |row| &row.id);
}
pub struct ChannelConfigUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for ChannelConfigTableHandle<'ctx> {
	type UpdateCallbackId = ChannelConfigUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> ChannelConfigUpdateCallbackId {
		ChannelConfigUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: ChannelConfigUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<ChannelConfig>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<ChannelConfig>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}

/// Access to the `id` unique index on the table `channel_config`,
/// which allows point queries on the field of the same name
/// via the [`ChannelConfigIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.channel_config().id().find(...)`.
pub struct ChannelConfigIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<ChannelConfig, i128>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> ChannelConfigTableHandle<'ctx> {
	/// Get a handle on the `id` unique index on the table `channel_config`.
	pub fn id(&self) -> ChannelConfigIdUnique<'ctx> {
		ChannelConfigIdUnique {
			imp:     self.imp.get_unique_constraint::<i128>("id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> ChannelConfigIdUnique<'ctx> {
	/// Find the subscribed row whose `id` column value is equal to `col_val`,
	/// if such a row is present in the client cache.
	pub fn find(&self, col_val: &i128) -> Option<ChannelConfig> {
		self.imp.find(col_val)
	}
}
