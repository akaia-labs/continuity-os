// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::account_link_request_type::AccountLinkRequest;

/// Table handle for the table `account_link_request`.
///
/// Obtain a handle from the
/// [`AccountLinkRequestTableAccess::account_link_request`] method on
/// [`super::RemoteTables`], like `ctx.db.account_link_request()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account_link_request().on_insert(...)`.
pub struct AccountLinkRequestTableHandle<'ctx> {
	imp: __sdk::TableHandle<AccountLinkRequest>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `account_link_request`.
///
/// Implemented for [`super::RemoteTables`].
pub trait AccountLinkRequestTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`AccountLinkRequestTableHandle`], which mediates access to the
	/// table `account_link_request`.
	fn account_link_request(&self) -> AccountLinkRequestTableHandle<'_>;
}

impl AccountLinkRequestTableAccess for super::RemoteTables {
	fn account_link_request(&self) -> AccountLinkRequestTableHandle<'_> {
		AccountLinkRequestTableHandle {
			imp: self
				.imp
				.get_table::<AccountLinkRequest>("account_link_request"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct AccountLinkRequestInsertCallbackId(__sdk::CallbackId);
pub struct AccountLinkRequestDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for AccountLinkRequestTableHandle<'ctx> {
	type DeleteCallbackId = AccountLinkRequestDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = AccountLinkRequestInsertCallbackId;
	type Row = AccountLinkRequest;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = AccountLinkRequest> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> AccountLinkRequestInsertCallbackId {
		AccountLinkRequestInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: AccountLinkRequestInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> AccountLinkRequestDeleteCallbackId {
		AccountLinkRequestDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: AccountLinkRequestDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<AccountLinkRequest>("account_link_request");
	_table.add_unique_constraint::<i128>("id", |row| &row.id);
}
pub struct AccountLinkRequestUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for AccountLinkRequestTableHandle<'ctx> {
	type UpdateCallbackId = AccountLinkRequestUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> AccountLinkRequestUpdateCallbackId {
		AccountLinkRequestUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: AccountLinkRequestUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<AccountLinkRequest>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<AccountLinkRequest>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}

/// Access to the `id` unique index on the table `account_link_request`,
/// which allows point queries on the field of the same name
/// via the [`AccountLinkRequestIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account_link_request().id().find(...)`.
pub struct AccountLinkRequestIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<AccountLinkRequest, i128>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> AccountLinkRequestTableHandle<'ctx> {
	/// Get a handle on the `id` unique index on the table
	/// `account_link_request`.
	pub fn id(&self) -> AccountLinkRequestIdUnique<'ctx> {
		AccountLinkRequestIdUnique {
			imp:     self.imp.get_unique_constraint::<i128>("id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> AccountLinkRequestIdUnique<'ctx> {
	/// Find the subscribed row whose `id` column value is equal to `col_val`,
	/// if such a row is present in the client cache.
	pub fn find(&self, col_val: &i128) -> Option<AccountLinkRequest> {
		self.imp.find(col_val)
	}
}
