// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::{
	actor_id_type::ActorId, channel_metadata_type::ChannelMetadata,
	primary_channel_type::PrimaryChannel,
};

/// Table handle for the table `primary_channel`.
///
/// Obtain a handle from the [`PrimaryChannelTableAccess::primary_channel`]
/// method on [`super::RemoteTables`], like `ctx.db.primary_channel()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.primary_channel().on_insert(...)`.
pub struct PrimaryChannelTableHandle<'ctx> {
	imp: __sdk::TableHandle<PrimaryChannel>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `primary_channel`.
///
/// Implemented for [`super::RemoteTables`].
pub trait PrimaryChannelTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`PrimaryChannelTableHandle`], which mediates access to the
	/// table `primary_channel`.
	fn primary_channel(&self) -> PrimaryChannelTableHandle<'_>;
}

impl PrimaryChannelTableAccess for super::RemoteTables {
	fn primary_channel(&self) -> PrimaryChannelTableHandle<'_> {
		PrimaryChannelTableHandle {
			imp: self.imp.get_table::<PrimaryChannel>("primary_channel"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct PrimaryChannelInsertCallbackId(__sdk::CallbackId);
pub struct PrimaryChannelDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for PrimaryChannelTableHandle<'ctx> {
	type DeleteCallbackId = PrimaryChannelDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = PrimaryChannelInsertCallbackId;
	type Row = PrimaryChannel;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = PrimaryChannel> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> PrimaryChannelInsertCallbackId {
		PrimaryChannelInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: PrimaryChannelInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> PrimaryChannelDeleteCallbackId {
		PrimaryChannelDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: PrimaryChannelDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<PrimaryChannel>("primary_channel");
	_table.add_unique_constraint::<String>("id", |row| &row.id);
	_table.add_unique_constraint::<String>("canonical_alias", |row| &row.canonical_alias);
}
pub struct PrimaryChannelUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for PrimaryChannelTableHandle<'ctx> {
	type UpdateCallbackId = PrimaryChannelUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> PrimaryChannelUpdateCallbackId {
		PrimaryChannelUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: PrimaryChannelUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<PrimaryChannel>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<PrimaryChannel>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}

/// Access to the `id` unique index on the table `primary_channel`,
/// which allows point queries on the field of the same name
/// via the [`PrimaryChannelIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.primary_channel().id().find(...)`.
pub struct PrimaryChannelIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<PrimaryChannel, String>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> PrimaryChannelTableHandle<'ctx> {
	/// Get a handle on the `id` unique index on the table `primary_channel`.
	pub fn id(&self) -> PrimaryChannelIdUnique<'ctx> {
		PrimaryChannelIdUnique {
			imp:     self.imp.get_unique_constraint::<String>("id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> PrimaryChannelIdUnique<'ctx> {
	/// Find the subscribed row whose `id` column value is equal to `col_val`,
	/// if such a row is present in the client cache.
	pub fn find(&self, col_val: &String) -> Option<PrimaryChannel> {
		self.imp.find(col_val)
	}
}

/// Access to the `canonical_alias` unique index on the table `primary_channel`,
/// which allows point queries on the field of the same name
/// via the [`PrimaryChannelCanonicalAliasUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.primary_channel().canonical_alias().find(...)`.
pub struct PrimaryChannelCanonicalAliasUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<PrimaryChannel, String>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> PrimaryChannelTableHandle<'ctx> {
	/// Get a handle on the `canonical_alias` unique index on the table
	/// `primary_channel`.
	pub fn canonical_alias(&self) -> PrimaryChannelCanonicalAliasUnique<'ctx> {
		PrimaryChannelCanonicalAliasUnique {
			imp:     self.imp.get_unique_constraint::<String>("canonical_alias"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> PrimaryChannelCanonicalAliasUnique<'ctx> {
	/// Find the subscribed row whose `canonical_alias` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &String) -> Option<PrimaryChannel> {
		self.imp.find(col_val)
	}
}
