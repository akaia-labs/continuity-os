// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::channel_metadata_type::ChannelMetadata;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct RegisterSubchannelArgs {
	pub subchannel_id:   String,
	pub alias:           String,
	pub metadata:        Option<ChannelMetadata>,
	pub superchannel_id: String,
	pub members:         Option<Vec<String>>,
}

impl From<RegisterSubchannelArgs> for super::Reducer {
	fn from(args: RegisterSubchannelArgs) -> Self {
		Self::RegisterSubchannel {
			subchannel_id:   args.subchannel_id,
			alias:           args.alias,
			metadata:        args.metadata,
			superchannel_id: args.superchannel_id,
			members:         args.members,
		}
	}
}

impl __sdk::InModule for RegisterSubchannelArgs {
	type Module = super::RemoteModule;
}

pub struct RegisterSubchannelCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `register_subchannel`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait register_subchannel {
	/// Request that the remote module invoke the reducer `register_subchannel`
	/// to run as soon as possible.
	///
	/// This method returns immediately, and errors only if we are unable to
	/// send the request. The reducer will run asynchronously in the future,
	///  and its status can be observed by listening for
	/// [`Self::on_register_subchannel`] callbacks.
	fn register_subchannel(
		&self, subchannel_id: String, alias: String, metadata: Option<ChannelMetadata>,
		superchannel_id: String, members: Option<Vec<String>>,
	) -> __sdk::Result<()>;
	/// Register a callback to run whenever we are notified of an invocation of
	/// the reducer `register_subchannel`.
	///
	/// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the
	/// [`super::ReducerEventContext`] to determine the reducer's status.
	///
	/// The returned [`RegisterSubchannelCallbackId`] can be passed to
	/// [`Self::remove_on_register_subchannel`] to cancel the callback.
	fn on_register_subchannel(
		&self,
		callback: impl FnMut(
			&super::ReducerEventContext,
			&String,
			&String,
			&Option<ChannelMetadata>,
			&String,
			&Option<Vec<String>>,
		) + Send
		+ 'static,
	) -> RegisterSubchannelCallbackId;
	/// Cancel a callback previously registered by
	/// [`Self::on_register_subchannel`], causing it not to run in the future.
	fn remove_on_register_subchannel(&self, callback: RegisterSubchannelCallbackId);
}

impl register_subchannel for super::RemoteReducers {
	fn register_subchannel(
		&self, subchannel_id: String, alias: String, metadata: Option<ChannelMetadata>,
		superchannel_id: String, members: Option<Vec<String>>,
	) -> __sdk::Result<()> {
		self.imp
			.call_reducer("register_subchannel", RegisterSubchannelArgs {
				subchannel_id,
				alias,
				metadata,
				superchannel_id,
				members,
			})
	}

	fn on_register_subchannel(
		&self,
		mut callback: impl FnMut(
			&super::ReducerEventContext,
			&String,
			&String,
			&Option<ChannelMetadata>,
			&String,
			&Option<Vec<String>>,
		) + Send
		+ 'static,
	) -> RegisterSubchannelCallbackId {
		RegisterSubchannelCallbackId(self.imp.on_reducer(
			"register_subchannel",
			Box::new(move |ctx: &super::ReducerEventContext| {
				let super::ReducerEventContext {
					event:
						__sdk::ReducerEvent {
							reducer:
								super::Reducer::RegisterSubchannel {
									subchannel_id,
									alias,
									metadata,
									superchannel_id,
									members,
								},
							..
						},
					..
				} = ctx
				else {
					unreachable!()
				};
				callback(
					ctx,
					subchannel_id,
					alias,
					metadata,
					superchannel_id,
					members,
				)
			}),
		))
	}

	fn remove_on_register_subchannel(&self, callback: RegisterSubchannelCallbackId) {
		self.imp
			.remove_on_reducer("register_subchannel", callback.0)
	}
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer
/// `register_subchannel`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version
/// bump.
pub trait set_flags_for_register_subchannel {
	/// Set the call-reducer flags for the reducer `register_subchannel` to
	/// `flags`.
	///
	/// This type is currently unstable and may be removed without a major
	/// version bump.
	fn register_subchannel(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_register_subchannel for super::SetReducerFlags {
	fn register_subchannel(&self, flags: __ws::CallReducerFlags) {
		self.imp
			.set_call_reducer_flags("register_subchannel", flags);
	}
}
