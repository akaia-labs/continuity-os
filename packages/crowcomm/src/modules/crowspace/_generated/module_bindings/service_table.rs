// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::service_type::Service;

/// Table handle for the table `service`.
///
/// Obtain a handle from the [`ServiceTableAccess::service`] method on
/// [`super::RemoteTables`], like `ctx.db.service()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.service().on_insert(...)`.
pub struct ServiceTableHandle<'ctx> {
	imp: __sdk::TableHandle<Service>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `service`.
///
/// Implemented for [`super::RemoteTables`].
pub trait ServiceTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`ServiceTableHandle`], which mediates access to the table
	/// `service`.
	fn service(&self) -> ServiceTableHandle<'_>;
}

impl ServiceTableAccess for super::RemoteTables {
	fn service(&self) -> ServiceTableHandle<'_> {
		ServiceTableHandle {
			imp: self.imp.get_table::<Service>("service"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct ServiceInsertCallbackId(__sdk::CallbackId);
pub struct ServiceDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for ServiceTableHandle<'ctx> {
	type DeleteCallbackId = ServiceDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = ServiceInsertCallbackId;
	type Row = Service;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = Service> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> ServiceInsertCallbackId {
		ServiceInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: ServiceInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> ServiceDeleteCallbackId {
		ServiceDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: ServiceDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<Service>("service");
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<Service>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<Service>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}
