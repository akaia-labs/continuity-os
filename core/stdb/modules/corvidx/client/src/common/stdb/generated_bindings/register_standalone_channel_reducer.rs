// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::{actor_id_type::ActorId, channel_metadata_type::ChannelMetadata};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct RegisterStandaloneChannelArgs {
	pub id:       String,
	pub alias:    String,
	pub members:  Option<Vec<ActorId>>,
	pub metadata: Option<ChannelMetadata>,
}

impl From<RegisterStandaloneChannelArgs> for super::Reducer {
	fn from(args: RegisterStandaloneChannelArgs) -> Self {
		Self::RegisterStandaloneChannel {
			id:       args.id,
			alias:    args.alias,
			members:  args.members,
			metadata: args.metadata,
		}
	}
}

impl __sdk::InModule for RegisterStandaloneChannelArgs {
	type Module = super::RemoteModule;
}

pub struct RegisterStandaloneChannelCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `register_standalone_channel`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait register_standalone_channel {
	/// Request that the remote module invoke the reducer
	/// `register_standalone_channel` to run as soon as possible.
	///
	/// This method returns immediately, and errors only if we are unable to
	/// send the request. The reducer will run asynchronously in the future,
	///  and its status can be observed by listening for
	/// [`Self::on_register_standalone_channel`] callbacks.
	fn register_standalone_channel(
		&self, id: String, alias: String, members: Option<Vec<ActorId>>,
		metadata: Option<ChannelMetadata>,
	) -> __sdk::Result<()>;
	/// Register a callback to run whenever we are notified of an invocation of
	/// the reducer `register_standalone_channel`.
	///
	/// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the
	/// [`super::ReducerEventContext`] to determine the reducer's status.
	///
	/// The returned [`RegisterStandaloneChannelCallbackId`] can be passed to
	/// [`Self::remove_on_register_standalone_channel`] to cancel the callback.
	fn on_register_standalone_channel(
		&self,
		callback: impl FnMut(
			&super::ReducerEventContext,
			&String,
			&String,
			&Option<Vec<ActorId>>,
			&Option<ChannelMetadata>,
		) + Send
		+ 'static,
	) -> RegisterStandaloneChannelCallbackId;
	/// Cancel a callback previously registered by
	/// [`Self::on_register_standalone_channel`], causing it not to run in the
	/// future.
	fn remove_on_register_standalone_channel(&self, callback: RegisterStandaloneChannelCallbackId);
}

impl register_standalone_channel for super::RemoteReducers {
	fn register_standalone_channel(
		&self, id: String, alias: String, members: Option<Vec<ActorId>>,
		metadata: Option<ChannelMetadata>,
	) -> __sdk::Result<()> {
		self.imp.call_reducer(
			"register_standalone_channel",
			RegisterStandaloneChannelArgs {
				id,
				alias,
				members,
				metadata,
			},
		)
	}

	fn on_register_standalone_channel(
		&self,
		mut callback: impl FnMut(
			&super::ReducerEventContext,
			&String,
			&String,
			&Option<Vec<ActorId>>,
			&Option<ChannelMetadata>,
		) + Send
		+ 'static,
	) -> RegisterStandaloneChannelCallbackId {
		RegisterStandaloneChannelCallbackId(self.imp.on_reducer(
			"register_standalone_channel",
			Box::new(move |ctx: &super::ReducerEventContext| {
				let super::ReducerEventContext {
					event:
						__sdk::ReducerEvent {
							reducer:
								super::Reducer::RegisterStandaloneChannel {
									id,
									alias,
									members,
									metadata,
								},
							..
						},
					..
				} = ctx
				else {
					unreachable!()
				};
				callback(ctx, id, alias, members, metadata)
			}),
		))
	}

	fn remove_on_register_standalone_channel(&self, callback: RegisterStandaloneChannelCallbackId) {
		self.imp
			.remove_on_reducer("register_standalone_channel", callback.0)
	}
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer
/// `register_standalone_channel`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version
/// bump.
pub trait set_flags_for_register_standalone_channel {
	/// Set the call-reducer flags for the reducer `register_standalone_channel`
	/// to `flags`.
	///
	/// This type is currently unstable and may be removed without a major
	/// version bump.
	fn register_standalone_channel(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_register_standalone_channel for super::SetReducerFlags {
	fn register_standalone_channel(&self, flags: __ws::CallReducerFlags) {
		self.imp
			.set_call_reducer_flags("register_standalone_channel", flags);
	}
}
