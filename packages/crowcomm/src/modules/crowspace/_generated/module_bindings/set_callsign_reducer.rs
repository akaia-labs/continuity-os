// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct SetCallsignArgs {
	pub callsign: String,
}

impl From<SetCallsignArgs> for super::Reducer {
	fn from(args: SetCallsignArgs) -> Self {
		Self::SetCallsign {
			callsign: args.callsign,
		}
	}
}

impl __sdk::InModule for SetCallsignArgs {
	type Module = super::RemoteModule;
}

pub struct SetCallsignCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `set_callsign`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait set_callsign {
	/// Request that the remote module invoke the reducer `set_callsign` to run as soon as possible.
	///
	/// This method returns immediately, and errors only if we are unable to send the request.
	/// The reducer will run asynchronously in the future,
	///  and its status can be observed by listening for [`Self::on_set_callsign`] callbacks.
	fn set_callsign(&self, callsign: String) -> __sdk::Result<()>;
	/// Register a callback to run whenever we are notified of an invocation of the reducer `set_callsign`.
	///
	/// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
	/// to determine the reducer's status.
	///
	/// The returned [`SetCallsignCallbackId`] can be passed to [`Self::remove_on_set_callsign`]
	/// to cancel the callback.
	fn on_set_callsign(
		&self, callback: impl FnMut(&super::ReducerEventContext, &String) + Send + 'static,
	) -> SetCallsignCallbackId;
	/// Cancel a callback previously registered by [`Self::on_set_callsign`],
	/// causing it not to run in the future.
	fn remove_on_set_callsign(&self, callback: SetCallsignCallbackId);
}

impl set_callsign for super::RemoteReducers {
	fn set_callsign(&self, callsign: String) -> __sdk::Result<()> {
		self.imp
			.call_reducer("set_callsign", SetCallsignArgs { callsign })
	}
	fn on_set_callsign(
		&self, mut callback: impl FnMut(&super::ReducerEventContext, &String) + Send + 'static,
	) -> SetCallsignCallbackId {
		SetCallsignCallbackId(self.imp.on_reducer(
			"set_callsign",
			Box::new(move |ctx: &super::ReducerEventContext| {
				let super::ReducerEventContext {
					event:
						__sdk::ReducerEvent {
							reducer: super::Reducer::SetCallsign { callsign },
							..
						},
					..
				} = ctx
				else {
					unreachable!()
				};
				callback(ctx, callsign)
			}),
		))
	}
	fn remove_on_set_callsign(&self, callback: SetCallsignCallbackId) {
		self.imp.remove_on_reducer("set_callsign", callback.0)
	}
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `set_callsign`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_set_callsign {
	/// Set the call-reducer flags for the reducer `set_callsign` to `flags`.
	///
	/// This type is currently unstable and may be removed without a major version bump.
	fn set_callsign(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_set_callsign for super::SetReducerFlags {
	fn set_callsign(&self, flags: __ws::CallReducerFlags) {
		self.imp.set_call_reducer_flags("set_callsign", flags);
	}
}
