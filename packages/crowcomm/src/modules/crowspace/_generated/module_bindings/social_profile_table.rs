// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::{
	social_profile_metadata_type::SocialProfileMetadata, social_profile_type::SocialProfile,
};

/// Table handle for the table `social_profile`.
///
/// Obtain a handle from the [`SocialProfileTableAccess::social_profile`] method
/// on [`super::RemoteTables`], like `ctx.db.social_profile()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.social_profile().on_insert(...)`.
pub struct SocialProfileTableHandle<'ctx> {
	imp: __sdk::TableHandle<SocialProfile>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `social_profile`.
///
/// Implemented for [`super::RemoteTables`].
pub trait SocialProfileTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`SocialProfileTableHandle`], which mediates access to the
	/// table `social_profile`.
	fn social_profile(&self) -> SocialProfileTableHandle<'_>;
}

impl SocialProfileTableAccess for super::RemoteTables {
	fn social_profile(&self) -> SocialProfileTableHandle<'_> {
		SocialProfileTableHandle {
			imp: self.imp.get_table::<SocialProfile>("social_profile"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct SocialProfileInsertCallbackId(__sdk::CallbackId);
pub struct SocialProfileDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for SocialProfileTableHandle<'ctx> {
	type DeleteCallbackId = SocialProfileDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = SocialProfileInsertCallbackId;
	type Row = SocialProfile;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = SocialProfile> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> SocialProfileInsertCallbackId {
		SocialProfileInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: SocialProfileInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> SocialProfileDeleteCallbackId {
		SocialProfileDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: SocialProfileDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<SocialProfile>("social_profile");
	_table.add_unique_constraint::<u64>("id", |row| &row.id);
}
pub struct SocialProfileUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for SocialProfileTableHandle<'ctx> {
	type UpdateCallbackId = SocialProfileUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> SocialProfileUpdateCallbackId {
		SocialProfileUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: SocialProfileUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<SocialProfile>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<SocialProfile>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}

/// Access to the `id` unique index on the table `social_profile`,
/// which allows point queries on the field of the same name
/// via the [`SocialProfileIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.social_profile().id().find(...)`.
pub struct SocialProfileIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<SocialProfile, u64>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> SocialProfileTableHandle<'ctx> {
	/// Get a handle on the `id` unique index on the table `social_profile`.
	pub fn id(&self) -> SocialProfileIdUnique<'ctx> {
		SocialProfileIdUnique {
			imp:     self.imp.get_unique_constraint::<u64>("id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> SocialProfileIdUnique<'ctx> {
	/// Find the subscribed row whose `id` column value is equal to `col_val`,
	/// if such a row is present in the client cache.
	pub fn find(&self, col_val: &u64) -> Option<SocialProfile> {
		self.imp.find(col_val)
	}
}
