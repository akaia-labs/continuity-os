// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::external_authentication_request_expiry_schedule_type::ExternalAuthenticationRequestExpirySchedule;

/// Table handle for the table `external_authentication_request_schedule`.
///
/// Obtain a handle from the
/// [`ExternalAuthenticationRequestScheduleTableAccess::external_authentication_request_schedule`]
/// method on [`super::RemoteTables`], like `ctx.db.
/// external_authentication_request_schedule()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.external_authentication_request_schedule().on_insert(...)`.
pub struct ExternalAuthenticationRequestScheduleTableHandle<'ctx> {
	imp: __sdk::TableHandle<ExternalAuthenticationRequestExpirySchedule>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table
/// `external_authentication_request_schedule`.
///
/// Implemented for [`super::RemoteTables`].
pub trait ExternalAuthenticationRequestScheduleTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`ExternalAuthenticationRequestScheduleTableHandle`], which
	/// mediates access to the table `external_authentication_request_schedule`.
	fn external_authentication_request_schedule(
		&self,
	) -> ExternalAuthenticationRequestScheduleTableHandle<'_>;
}

impl ExternalAuthenticationRequestScheduleTableAccess for super::RemoteTables {
	fn external_authentication_request_schedule(
		&self,
	) -> ExternalAuthenticationRequestScheduleTableHandle<'_> {
		ExternalAuthenticationRequestScheduleTableHandle {
			imp: self
				.imp
				.get_table::<ExternalAuthenticationRequestExpirySchedule>(
					"external_authentication_request_schedule",
				),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct ExternalAuthenticationRequestScheduleInsertCallbackId(__sdk::CallbackId);
pub struct ExternalAuthenticationRequestScheduleDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for ExternalAuthenticationRequestScheduleTableHandle<'ctx> {
	type DeleteCallbackId = ExternalAuthenticationRequestScheduleDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = ExternalAuthenticationRequestScheduleInsertCallbackId;
	type Row = ExternalAuthenticationRequestExpirySchedule;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = ExternalAuthenticationRequestExpirySchedule> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> ExternalAuthenticationRequestScheduleInsertCallbackId {
		ExternalAuthenticationRequestScheduleInsertCallbackId(
			self.imp.on_insert(Box::new(callback)),
		)
	}

	fn remove_on_insert(&self, callback: ExternalAuthenticationRequestScheduleInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> ExternalAuthenticationRequestScheduleDeleteCallbackId {
		ExternalAuthenticationRequestScheduleDeleteCallbackId(
			self.imp.on_delete(Box::new(callback)),
		)
	}

	fn remove_on_delete(&self, callback: ExternalAuthenticationRequestScheduleDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<ExternalAuthenticationRequestExpirySchedule>(
		"external_authentication_request_schedule",
	);
	_table.add_unique_constraint::<u64>("scheduled_id", |row| &row.scheduled_id);
}
pub struct ExternalAuthenticationRequestScheduleUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for ExternalAuthenticationRequestScheduleTableHandle<'ctx> {
	type UpdateCallbackId = ExternalAuthenticationRequestScheduleUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> ExternalAuthenticationRequestScheduleUpdateCallbackId {
		ExternalAuthenticationRequestScheduleUpdateCallbackId(
			self.imp.on_update(Box::new(callback)),
		)
	}

	fn remove_on_update(&self, callback: ExternalAuthenticationRequestScheduleUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<ExternalAuthenticationRequestExpirySchedule>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse(
			"TableUpdate<ExternalAuthenticationRequestExpirySchedule>",
			"TableUpdate",
		)
		.with_cause(e)
		.into()
	})
}

/// Access to the `scheduled_id` unique index on the table
/// `external_authentication_request_schedule`, which allows point queries on
/// the field of the same name
/// via the [`ExternalAuthenticationRequestScheduleScheduledIdUnique::find`]
/// method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.external_authentication_request_schedule().scheduled_id().
/// find(...)`.
pub struct ExternalAuthenticationRequestScheduleScheduledIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<ExternalAuthenticationRequestExpirySchedule, u64>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> ExternalAuthenticationRequestScheduleTableHandle<'ctx> {
	/// Get a handle on the `scheduled_id` unique index on the table
	/// `external_authentication_request_schedule`.
	pub fn scheduled_id(&self) -> ExternalAuthenticationRequestScheduleScheduledIdUnique<'ctx> {
		ExternalAuthenticationRequestScheduleScheduledIdUnique {
			imp:     self.imp.get_unique_constraint::<u64>("scheduled_id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> ExternalAuthenticationRequestScheduleScheduledIdUnique<'ctx> {
	/// Find the subscribed row whose `scheduled_id` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &u64) -> Option<ExternalAuthenticationRequestExpirySchedule> {
		self.imp.find(col_val)
	}
}
