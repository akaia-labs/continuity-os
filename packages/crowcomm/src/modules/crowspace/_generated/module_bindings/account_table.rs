// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::{account_role_type::AccountRole, account_type::Account};

/// Table handle for the table `account`.
///
/// Obtain a handle from the [`AccountTableAccess::account`] method on
/// [`super::RemoteTables`], like `ctx.db.account()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account().on_insert(...)`.
pub struct AccountTableHandle<'ctx> {
	imp: __sdk::TableHandle<Account>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `account`.
///
/// Implemented for [`super::RemoteTables`].
pub trait AccountTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`AccountTableHandle`], which mediates access to the table
	/// `account`.
	fn account(&self) -> AccountTableHandle<'_>;
}

impl AccountTableAccess for super::RemoteTables {
	fn account(&self) -> AccountTableHandle<'_> {
		AccountTableHandle {
			imp: self.imp.get_table::<Account>("account"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct AccountInsertCallbackId(__sdk::CallbackId);
pub struct AccountDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for AccountTableHandle<'ctx> {
	type DeleteCallbackId = AccountDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = AccountInsertCallbackId;
	type Row = Account;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = Account> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> AccountInsertCallbackId {
		AccountInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: AccountInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> AccountDeleteCallbackId {
		AccountDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: AccountDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<Account>("account");
	_table.add_unique_constraint::<__sdk::Identity>("id", |row| &row.id);
	_table.add_unique_constraint::<String>("callsign", |row| &row.callsign);
	_table.add_unique_constraint::<u64>("profile_id", |row| &row.profile_id);
}
pub struct AccountUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for AccountTableHandle<'ctx> {
	type UpdateCallbackId = AccountUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> AccountUpdateCallbackId {
		AccountUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: AccountUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<Account>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<Account>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}

/// Access to the `id` unique index on the table `account`,
/// which allows point queries on the field of the same name
/// via the [`AccountIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account().id().find(...)`.
pub struct AccountIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<Account, __sdk::Identity>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> AccountTableHandle<'ctx> {
	/// Get a handle on the `id` unique index on the table `account`.
	pub fn id(&self) -> AccountIdUnique<'ctx> {
		AccountIdUnique {
			imp:     self.imp.get_unique_constraint::<__sdk::Identity>("id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> AccountIdUnique<'ctx> {
	/// Find the subscribed row whose `id` column value is equal to `col_val`,
	/// if such a row is present in the client cache.
	pub fn find(&self, col_val: &__sdk::Identity) -> Option<Account> {
		self.imp.find(col_val)
	}
}

/// Access to the `callsign` unique index on the table `account`,
/// which allows point queries on the field of the same name
/// via the [`AccountCallsignUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account().callsign().find(...)`.
pub struct AccountCallsignUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<Account, String>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> AccountTableHandle<'ctx> {
	/// Get a handle on the `callsign` unique index on the table `account`.
	pub fn callsign(&self) -> AccountCallsignUnique<'ctx> {
		AccountCallsignUnique {
			imp:     self.imp.get_unique_constraint::<String>("callsign"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> AccountCallsignUnique<'ctx> {
	/// Find the subscribed row whose `callsign` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &String) -> Option<Account> {
		self.imp.find(col_val)
	}
}

/// Access to the `profile_id` unique index on the table `account`,
/// which allows point queries on the field of the same name
/// via the [`AccountProfileIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account().profile_id().find(...)`.
pub struct AccountProfileIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<Account, u64>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> AccountTableHandle<'ctx> {
	/// Get a handle on the `profile_id` unique index on the table `account`.
	pub fn profile_id(&self) -> AccountProfileIdUnique<'ctx> {
		AccountProfileIdUnique {
			imp:     self.imp.get_unique_constraint::<u64>("profile_id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> AccountProfileIdUnique<'ctx> {
	/// Find the subscribed row whose `profile_id` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &u64) -> Option<Account> {
		self.imp.find(col_val)
	}
}
