// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::local_account_role_type::LocalAccountRole;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct AdminSetAccountRoleArgs {
	pub account_id: __sdk::Identity,
	pub role:       LocalAccountRole,
}

impl From<AdminSetAccountRoleArgs> for super::Reducer {
	fn from(args: AdminSetAccountRoleArgs) -> Self {
		Self::AdminSetAccountRole {
			account_id: args.account_id,
			role:       args.role,
		}
	}
}

impl __sdk::InModule for AdminSetAccountRoleArgs {
	type Module = super::RemoteModule;
}

pub struct AdminSetAccountRoleCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `admin_set_account_role`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait admin_set_account_role {
	/// Request that the remote module invoke the reducer
	/// `admin_set_account_role` to run as soon as possible.
	///
	/// This method returns immediately, and errors only if we are unable to
	/// send the request. The reducer will run asynchronously in the future,
	///  and its status can be observed by listening for
	/// [`Self::on_admin_set_account_role`] callbacks.
	fn admin_set_account_role(
		&self, account_id: __sdk::Identity, role: LocalAccountRole,
	) -> __sdk::Result<()>;
	/// Register a callback to run whenever we are notified of an invocation of
	/// the reducer `admin_set_account_role`.
	///
	/// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the
	/// [`super::ReducerEventContext`] to determine the reducer's status.
	///
	/// The returned [`AdminSetAccountRoleCallbackId`] can be passed to
	/// [`Self::remove_on_admin_set_account_role`] to cancel the callback.
	fn on_admin_set_account_role(
		&self,
		callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &LocalAccountRole)
		+ Send
		+ 'static,
	) -> AdminSetAccountRoleCallbackId;
	/// Cancel a callback previously registered by
	/// [`Self::on_admin_set_account_role`], causing it not to run in the
	/// future.
	fn remove_on_admin_set_account_role(&self, callback: AdminSetAccountRoleCallbackId);
}

impl admin_set_account_role for super::RemoteReducers {
	fn admin_set_account_role(
		&self, account_id: __sdk::Identity, role: LocalAccountRole,
	) -> __sdk::Result<()> {
		self.imp
			.call_reducer("admin_set_account_role", AdminSetAccountRoleArgs {
				account_id,
				role,
			})
	}

	fn on_admin_set_account_role(
		&self,
		mut callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &LocalAccountRole)
		+ Send
		+ 'static,
	) -> AdminSetAccountRoleCallbackId {
		AdminSetAccountRoleCallbackId(self.imp.on_reducer(
			"admin_set_account_role",
			Box::new(move |ctx: &super::ReducerEventContext| {
				let super::ReducerEventContext {
					event:
						__sdk::ReducerEvent {
							reducer: super::Reducer::AdminSetAccountRole { account_id, role },
							..
						},
					..
				} = ctx
				else {
					unreachable!()
				};
				callback(ctx, account_id, role)
			}),
		))
	}

	fn remove_on_admin_set_account_role(&self, callback: AdminSetAccountRoleCallbackId) {
		self.imp
			.remove_on_reducer("admin_set_account_role", callback.0)
	}
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer
/// `admin_set_account_role`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version
/// bump.
pub trait set_flags_for_admin_set_account_role {
	/// Set the call-reducer flags for the reducer `admin_set_account_role` to
	/// `flags`.
	///
	/// This type is currently unstable and may be removed without a major
	/// version bump.
	fn admin_set_account_role(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_admin_set_account_role for super::SetReducerFlags {
	fn admin_set_account_role(&self, flags: __ws::CallReducerFlags) {
		self.imp
			.set_call_reducer_flags("admin_set_account_role", flags);
	}
}
