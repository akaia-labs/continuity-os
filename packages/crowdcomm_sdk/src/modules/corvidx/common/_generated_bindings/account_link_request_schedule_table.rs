// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::account_link_request_expiry_schedule_type::AccountLinkRequestExpirySchedule;

/// Table handle for the table `account_link_request_schedule`.
///
/// Obtain a handle from the
/// [`AccountLinkRequestScheduleTableAccess::account_link_request_schedule`]
/// method on [`super::RemoteTables`], like `ctx.db.
/// account_link_request_schedule()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account_link_request_schedule().on_insert(...)`.
pub struct AccountLinkRequestScheduleTableHandle<'ctx> {
	imp: __sdk::TableHandle<AccountLinkRequestExpirySchedule>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `account_link_request_schedule`.
///
/// Implemented for [`super::RemoteTables`].
pub trait AccountLinkRequestScheduleTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`AccountLinkRequestScheduleTableHandle`], which mediates
	/// access to the table `account_link_request_schedule`.
	fn account_link_request_schedule(&self) -> AccountLinkRequestScheduleTableHandle<'_>;
}

impl AccountLinkRequestScheduleTableAccess for super::RemoteTables {
	fn account_link_request_schedule(&self) -> AccountLinkRequestScheduleTableHandle<'_> {
		AccountLinkRequestScheduleTableHandle {
			imp: self
				.imp
				.get_table::<AccountLinkRequestExpirySchedule>("account_link_request_schedule"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct AccountLinkRequestScheduleInsertCallbackId(__sdk::CallbackId);
pub struct AccountLinkRequestScheduleDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for AccountLinkRequestScheduleTableHandle<'ctx> {
	type DeleteCallbackId = AccountLinkRequestScheduleDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = AccountLinkRequestScheduleInsertCallbackId;
	type Row = AccountLinkRequestExpirySchedule;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = AccountLinkRequestExpirySchedule> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> AccountLinkRequestScheduleInsertCallbackId {
		AccountLinkRequestScheduleInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: AccountLinkRequestScheduleInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> AccountLinkRequestScheduleDeleteCallbackId {
		AccountLinkRequestScheduleDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: AccountLinkRequestScheduleDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache
		.get_or_make_table::<AccountLinkRequestExpirySchedule>("account_link_request_schedule");
	_table.add_unique_constraint::<u64>("scheduled_id", |row| &row.scheduled_id);
}
pub struct AccountLinkRequestScheduleUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for AccountLinkRequestScheduleTableHandle<'ctx> {
	type UpdateCallbackId = AccountLinkRequestScheduleUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> AccountLinkRequestScheduleUpdateCallbackId {
		AccountLinkRequestScheduleUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: AccountLinkRequestScheduleUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<AccountLinkRequestExpirySchedule>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse(
			"TableUpdate<AccountLinkRequestExpirySchedule>",
			"TableUpdate",
		)
		.with_cause(e)
		.into()
	})
}

/// Access to the `scheduled_id` unique index on the table
/// `account_link_request_schedule`, which allows point queries on the field of
/// the same name via the [`AccountLinkRequestScheduleScheduledIdUnique::find`]
/// method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.account_link_request_schedule().scheduled_id().find(...)`.
pub struct AccountLinkRequestScheduleScheduledIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<AccountLinkRequestExpirySchedule, u64>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> AccountLinkRequestScheduleTableHandle<'ctx> {
	/// Get a handle on the `scheduled_id` unique index on the table
	/// `account_link_request_schedule`.
	pub fn scheduled_id(&self) -> AccountLinkRequestScheduleScheduledIdUnique<'ctx> {
		AccountLinkRequestScheduleScheduledIdUnique {
			imp:     self.imp.get_unique_constraint::<u64>("scheduled_id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> AccountLinkRequestScheduleScheduledIdUnique<'ctx> {
	/// Find the subscribed row whose `scheduled_id` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &u64) -> Option<AccountLinkRequestExpirySchedule> {
		self.imp.find(col_val)
	}
}
