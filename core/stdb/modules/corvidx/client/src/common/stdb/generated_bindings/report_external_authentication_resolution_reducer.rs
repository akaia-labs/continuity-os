// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::external_authentication_request_type::ExternalAuthenticationRequest;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct ReportExternalAuthenticationResolutionArgs {
	pub request:     ExternalAuthenticationRequest,
	pub is_approved: bool,
}

impl From<ReportExternalAuthenticationResolutionArgs> for super::Reducer {
	fn from(args: ReportExternalAuthenticationResolutionArgs) -> Self {
		Self::ReportExternalAuthenticationResolution {
			request:     args.request,
			is_approved: args.is_approved,
		}
	}
}

impl __sdk::InModule for ReportExternalAuthenticationResolutionArgs {
	type Module = super::RemoteModule;
}

pub struct ReportExternalAuthenticationResolutionCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer
/// `report_external_authentication_resolution`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait report_external_authentication_resolution {
	/// Request that the remote module invoke the reducer
	/// `report_external_authentication_resolution` to run as soon as possible.
	///
	/// This method returns immediately, and errors only if we are unable to
	/// send the request. The reducer will run asynchronously in the future,
	///  and its status can be observed by listening for
	/// [`Self::on_report_external_authentication_resolution`] callbacks.
	fn report_external_authentication_resolution(
		&self, request: ExternalAuthenticationRequest, is_approved: bool,
	) -> __sdk::Result<()>;
	/// Register a callback to run whenever we are notified of an invocation of
	/// the reducer `report_external_authentication_resolution`.
	///
	/// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the
	/// [`super::ReducerEventContext`] to determine the reducer's status.
	///
	/// The returned [`ReportExternalAuthenticationResolutionCallbackId`] can be
	/// passed to [`Self::remove_on_report_external_authentication_resolution`]
	/// to cancel the callback.
	fn on_report_external_authentication_resolution(
		&self,
		callback: impl FnMut(&super::ReducerEventContext, &ExternalAuthenticationRequest, &bool)
		+ Send
		+ 'static,
	) -> ReportExternalAuthenticationResolutionCallbackId;
	/// Cancel a callback previously registered by
	/// [`Self::on_report_external_authentication_resolution`], causing it not
	/// to run in the future.
	fn remove_on_report_external_authentication_resolution(
		&self, callback: ReportExternalAuthenticationResolutionCallbackId,
	);
}

impl report_external_authentication_resolution for super::RemoteReducers {
	fn report_external_authentication_resolution(
		&self, request: ExternalAuthenticationRequest, is_approved: bool,
	) -> __sdk::Result<()> {
		self.imp.call_reducer(
			"report_external_authentication_resolution",
			ReportExternalAuthenticationResolutionArgs {
				request,
				is_approved,
			},
		)
	}

	fn on_report_external_authentication_resolution(
		&self,
		mut callback: impl FnMut(&super::ReducerEventContext, &ExternalAuthenticationRequest, &bool)
		+ Send
		+ 'static,
	) -> ReportExternalAuthenticationResolutionCallbackId {
		ReportExternalAuthenticationResolutionCallbackId(self.imp.on_reducer(
			"report_external_authentication_resolution",
			Box::new(move |ctx: &super::ReducerEventContext| {
				let super::ReducerEventContext {
					event:
						__sdk::ReducerEvent {
							reducer:
								super::Reducer::ReportExternalAuthenticationResolution {
									request,
									is_approved,
								},
							..
						},
					..
				} = ctx
				else {
					unreachable!()
				};
				callback(ctx, request, is_approved)
			}),
		))
	}

	fn remove_on_report_external_authentication_resolution(
		&self, callback: ReportExternalAuthenticationResolutionCallbackId,
	) {
		self.imp
			.remove_on_reducer("report_external_authentication_resolution", callback.0)
	}
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer
/// `report_external_authentication_resolution`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version
/// bump.
pub trait set_flags_for_report_external_authentication_resolution {
	/// Set the call-reducer flags for the reducer
	/// `report_external_authentication_resolution` to `flags`.
	///
	/// This type is currently unstable and may be removed without a major
	/// version bump.
	fn report_external_authentication_resolution(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_report_external_authentication_resolution for super::SetReducerFlags {
	fn report_external_authentication_resolution(&self, flags: __ws::CallReducerFlags) {
		self.imp
			.set_call_reducer_flags("report_external_authentication_resolution", flags);
	}
}
