// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::{local_account_role_type::LocalAccountRole, local_account_type::LocalAccount};

/// Table handle for the table `local_account`.
///
/// Obtain a handle from the [`LocalAccountTableAccess::local_account`] method
/// on [`super::RemoteTables`], like `ctx.db.local_account()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.local_account().on_insert(...)`.
pub struct LocalAccountTableHandle<'ctx> {
	imp: __sdk::TableHandle<LocalAccount>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `local_account`.
///
/// Implemented for [`super::RemoteTables`].
pub trait LocalAccountTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`LocalAccountTableHandle`], which mediates access to the table
	/// `local_account`.
	fn local_account(&self) -> LocalAccountTableHandle<'_>;
}

impl LocalAccountTableAccess for super::RemoteTables {
	fn local_account(&self) -> LocalAccountTableHandle<'_> {
		LocalAccountTableHandle {
			imp: self.imp.get_table::<LocalAccount>("local_account"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct LocalAccountInsertCallbackId(__sdk::CallbackId);
pub struct LocalAccountDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for LocalAccountTableHandle<'ctx> {
	type DeleteCallbackId = LocalAccountDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = LocalAccountInsertCallbackId;
	type Row = LocalAccount;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = LocalAccount> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> LocalAccountInsertCallbackId {
		LocalAccountInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: LocalAccountInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> LocalAccountDeleteCallbackId {
		LocalAccountDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: LocalAccountDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<LocalAccount>("local_account");
	_table.add_unique_constraint::<__sdk::Identity>("id", |row| &row.id);
	_table.add_unique_constraint::<String>("callsign", |row| &row.callsign);
	_table.add_unique_constraint::<u64>("profile_id", |row| &row.profile_id);
}
pub struct LocalAccountUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for LocalAccountTableHandle<'ctx> {
	type UpdateCallbackId = LocalAccountUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> LocalAccountUpdateCallbackId {
		LocalAccountUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: LocalAccountUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<LocalAccount>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<LocalAccount>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}

/// Access to the `id` unique index on the table `local_account`,
/// which allows point queries on the field of the same name
/// via the [`LocalAccountIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.local_account().id().find(...)`.
pub struct LocalAccountIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<LocalAccount, __sdk::Identity>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> LocalAccountTableHandle<'ctx> {
	/// Get a handle on the `id` unique index on the table `local_account`.
	pub fn id(&self) -> LocalAccountIdUnique<'ctx> {
		LocalAccountIdUnique {
			imp:     self.imp.get_unique_constraint::<__sdk::Identity>("id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> LocalAccountIdUnique<'ctx> {
	/// Find the subscribed row whose `id` column value is equal to `col_val`,
	/// if such a row is present in the client cache.
	pub fn find(&self, col_val: &__sdk::Identity) -> Option<LocalAccount> {
		self.imp.find(col_val)
	}
}

/// Access to the `callsign` unique index on the table `local_account`,
/// which allows point queries on the field of the same name
/// via the [`LocalAccountCallsignUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.local_account().callsign().find(...)`.
pub struct LocalAccountCallsignUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<LocalAccount, String>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> LocalAccountTableHandle<'ctx> {
	/// Get a handle on the `callsign` unique index on the table
	/// `local_account`.
	pub fn callsign(&self) -> LocalAccountCallsignUnique<'ctx> {
		LocalAccountCallsignUnique {
			imp:     self.imp.get_unique_constraint::<String>("callsign"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> LocalAccountCallsignUnique<'ctx> {
	/// Find the subscribed row whose `callsign` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &String) -> Option<LocalAccount> {
		self.imp.find(col_val)
	}
}

/// Access to the `profile_id` unique index on the table `local_account`,
/// which allows point queries on the field of the same name
/// via the [`LocalAccountProfileIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.local_account().profile_id().find(...)`.
pub struct LocalAccountProfileIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<LocalAccount, u64>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> LocalAccountTableHandle<'ctx> {
	/// Get a handle on the `profile_id` unique index on the table
	/// `local_account`.
	pub fn profile_id(&self) -> LocalAccountProfileIdUnique<'ctx> {
		LocalAccountProfileIdUnique {
			imp:     self.imp.get_unique_constraint::<u64>("profile_id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> LocalAccountProfileIdUnique<'ctx> {
	/// Find the subscribed row whose `profile_id` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &u64) -> Option<LocalAccount> {
		self.imp.find(col_val)
	}
}
