// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct DeleteSubchannelArgs {
	pub id: String,
}

impl From<DeleteSubchannelArgs> for super::Reducer {
	fn from(args: DeleteSubchannelArgs) -> Self {
		Self::DeleteSubchannel { id: args.id }
	}
}

impl __sdk::InModule for DeleteSubchannelArgs {
	type Module = super::RemoteModule;
}

pub struct DeleteSubchannelCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `delete_subchannel`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait delete_subchannel {
	/// Request that the remote module invoke the reducer `delete_subchannel` to
	/// run as soon as possible.
	///
	/// This method returns immediately, and errors only if we are unable to
	/// send the request. The reducer will run asynchronously in the future,
	///  and its status can be observed by listening for
	/// [`Self::on_delete_subchannel`] callbacks.
	fn delete_subchannel(&self, id: String) -> __sdk::Result<()>;
	/// Register a callback to run whenever we are notified of an invocation of
	/// the reducer `delete_subchannel`.
	///
	/// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the
	/// [`super::ReducerEventContext`] to determine the reducer's status.
	///
	/// The returned [`DeleteSubchannelCallbackId`] can be passed to
	/// [`Self::remove_on_delete_subchannel`] to cancel the callback.
	fn on_delete_subchannel(
		&self, callback: impl FnMut(&super::ReducerEventContext, &String) + Send + 'static,
	) -> DeleteSubchannelCallbackId;
	/// Cancel a callback previously registered by
	/// [`Self::on_delete_subchannel`], causing it not to run in the future.
	fn remove_on_delete_subchannel(&self, callback: DeleteSubchannelCallbackId);
}

impl delete_subchannel for super::RemoteReducers {
	fn delete_subchannel(&self, id: String) -> __sdk::Result<()> {
		self.imp
			.call_reducer("delete_subchannel", DeleteSubchannelArgs { id })
	}

	fn on_delete_subchannel(
		&self, mut callback: impl FnMut(&super::ReducerEventContext, &String) + Send + 'static,
	) -> DeleteSubchannelCallbackId {
		DeleteSubchannelCallbackId(self.imp.on_reducer(
			"delete_subchannel",
			Box::new(move |ctx: &super::ReducerEventContext| {
				let super::ReducerEventContext {
					event:
						__sdk::ReducerEvent {
							reducer: super::Reducer::DeleteSubchannel { id },
							..
						},
					..
				} = ctx
				else {
					unreachable!()
				};
				callback(ctx, id)
			}),
		))
	}

	fn remove_on_delete_subchannel(&self, callback: DeleteSubchannelCallbackId) {
		self.imp.remove_on_reducer("delete_subchannel", callback.0)
	}
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer
/// `delete_subchannel`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version
/// bump.
pub trait set_flags_for_delete_subchannel {
	/// Set the call-reducer flags for the reducer `delete_subchannel` to
	/// `flags`.
	///
	/// This type is currently unstable and may be removed without a major
	/// version bump.
	fn delete_subchannel(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_delete_subchannel for super::SetReducerFlags {
	fn delete_subchannel(&self, flags: __ws::CallReducerFlags) {
		self.imp.set_call_reducer_flags("delete_subchannel", flags);
	}
}
