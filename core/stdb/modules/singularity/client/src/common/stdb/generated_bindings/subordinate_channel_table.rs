// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::{
	actor_id_type::ActorId, channel_metadata_type::ChannelMetadata,
	subordinate_channel_type::SubordinateChannel,
};

/// Table handle for the table `subordinate_channel`.
///
/// Obtain a handle from the
/// [`SubordinateChannelTableAccess::subordinate_channel`] method on
/// [`super::RemoteTables`], like `ctx.db.subordinate_channel()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.subordinate_channel().on_insert(...)`.
pub struct SubordinateChannelTableHandle<'ctx> {
	imp: __sdk::TableHandle<SubordinateChannel>,
	ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `subordinate_channel`.
///
/// Implemented for [`super::RemoteTables`].
pub trait SubordinateChannelTableAccess {
	#[allow(non_snake_case)]
	/// Obtain a [`SubordinateChannelTableHandle`], which mediates access to the
	/// table `subordinate_channel`.
	fn subordinate_channel(&self) -> SubordinateChannelTableHandle<'_>;
}

impl SubordinateChannelTableAccess for super::RemoteTables {
	fn subordinate_channel(&self) -> SubordinateChannelTableHandle<'_> {
		SubordinateChannelTableHandle {
			imp: self
				.imp
				.get_table::<SubordinateChannel>("subordinate_channel"),
			ctx: std::marker::PhantomData,
		}
	}
}

pub struct SubordinateChannelInsertCallbackId(__sdk::CallbackId);
pub struct SubordinateChannelDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for SubordinateChannelTableHandle<'ctx> {
	type DeleteCallbackId = SubordinateChannelDeleteCallbackId;
	type EventContext = super::EventContext;
	type InsertCallbackId = SubordinateChannelInsertCallbackId;
	type Row = SubordinateChannel;

	fn count(&self) -> u64 {
		self.imp.count()
	}

	fn iter(&self) -> impl Iterator<Item = SubordinateChannel> + '_ {
		self.imp.iter()
	}

	fn on_insert(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> SubordinateChannelInsertCallbackId {
		SubordinateChannelInsertCallbackId(self.imp.on_insert(Box::new(callback)))
	}

	fn remove_on_insert(&self, callback: SubordinateChannelInsertCallbackId) {
		self.imp.remove_on_insert(callback.0)
	}

	fn on_delete(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
	) -> SubordinateChannelDeleteCallbackId {
		SubordinateChannelDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
	}

	fn remove_on_delete(&self, callback: SubordinateChannelDeleteCallbackId) {
		self.imp.remove_on_delete(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
	let _table = client_cache.get_or_make_table::<SubordinateChannel>("subordinate_channel");
	_table.add_unique_constraint::<String>("id", |row| &row.id);
	_table.add_unique_constraint::<String>("canonical_alias", |row| &row.canonical_alias);
}
pub struct SubordinateChannelUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for SubordinateChannelTableHandle<'ctx> {
	type UpdateCallbackId = SubordinateChannelUpdateCallbackId;

	fn on_update(
		&self, callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
	) -> SubordinateChannelUpdateCallbackId {
		SubordinateChannelUpdateCallbackId(self.imp.on_update(Box::new(callback)))
	}

	fn remove_on_update(&self, callback: SubordinateChannelUpdateCallbackId) {
		self.imp.remove_on_update(callback.0)
	}
}

#[doc(hidden)]
pub(super) fn parse_table_update(
	raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<SubordinateChannel>> {
	__sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
		__sdk::InternalError::failed_parse("TableUpdate<SubordinateChannel>", "TableUpdate")
			.with_cause(e)
			.into()
	})
}

/// Access to the `id` unique index on the table `subordinate_channel`,
/// which allows point queries on the field of the same name
/// via the [`SubordinateChannelIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.subordinate_channel().id().find(...)`.
pub struct SubordinateChannelIdUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<SubordinateChannel, String>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> SubordinateChannelTableHandle<'ctx> {
	/// Get a handle on the `id` unique index on the table
	/// `subordinate_channel`.
	pub fn id(&self) -> SubordinateChannelIdUnique<'ctx> {
		SubordinateChannelIdUnique {
			imp:     self.imp.get_unique_constraint::<String>("id"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> SubordinateChannelIdUnique<'ctx> {
	/// Find the subscribed row whose `id` column value is equal to `col_val`,
	/// if such a row is present in the client cache.
	pub fn find(&self, col_val: &String) -> Option<SubordinateChannel> {
		self.imp.find(col_val)
	}
}

/// Access to the `canonical_alias` unique index on the table
/// `subordinate_channel`, which allows point queries on the field of the same
/// name via the [`SubordinateChannelCanonicalAliasUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.subordinate_channel().canonical_alias().find(...)`.
pub struct SubordinateChannelCanonicalAliasUnique<'ctx> {
	imp:     __sdk::UniqueConstraintHandle<SubordinateChannel, String>,
	phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> SubordinateChannelTableHandle<'ctx> {
	/// Get a handle on the `canonical_alias` unique index on the table
	/// `subordinate_channel`.
	pub fn canonical_alias(&self) -> SubordinateChannelCanonicalAliasUnique<'ctx> {
		SubordinateChannelCanonicalAliasUnique {
			imp:     self.imp.get_unique_constraint::<String>("canonical_alias"),
			phantom: std::marker::PhantomData,
		}
	}
}

impl<'ctx> SubordinateChannelCanonicalAliasUnique<'ctx> {
	/// Find the subscribed row whose `canonical_alias` column value is equal to
	/// `col_val`, if such a row is present in the client cache.
	pub fn find(&self, col_val: &String) -> Option<SubordinateChannel> {
		self.imp.find(col_val)
	}
}
